
//! Autogenerated weights for pallet_clubs
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-01, STEPS: `10`, REPEAT: `50`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-20`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --pallet
// pallet_clubs
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// -r
// 50
// -s
// 10
// --output=./pallets/clubs/src/weights.rs
// --template=./tpl/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_clubs.
pub trait WeightInfo {
	fn create_club() -> Weight;
	fn add_member() -> Weight;
	fn extend_membership() -> Weight;
	fn transfer_ownership() -> Weight;
	fn set_annual_fee() -> Weight;
}

/// Weights for pallet_clubs using the Substrate node and recommended hardware.
pub struct NodeTplWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for NodeTplWeight<T> {
	/// Storage: Clubs CounterForClubs (r:1 w:1)
	/// Proof: Clubs CounterForClubs (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Clubs Clubs (r:1 w:1)
	/// Proof: Clubs Clubs (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn create_club() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `8717`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(48_000_000, 8717)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Clubs Clubs (r:1 w:0)
	/// Proof: Clubs Clubs (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
	/// Storage: Clubs Members (r:1 w:1)
	/// Proof: Clubs Members (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	fn add_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `127`
		//  Estimated: `7172`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(26_000_000, 7172)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Clubs Members (r:1 w:1)
	/// Proof: Clubs Members (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	/// Storage: Clubs Clubs (r:1 w:0)
	/// Proof: Clubs Clubs (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn extend_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `362`
		//  Estimated: `10765`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(55_000_000, 10765)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Clubs Clubs (r:1 w:1)
	/// Proof: Clubs Clubs (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
	fn transfer_ownership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `127`
		//  Estimated: `3635`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(23_000_000, 3635)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Clubs Clubs (r:1 w:1)
	/// Proof: Clubs Clubs (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
	fn set_annual_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `127`
		//  Estimated: `3635`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(24_000_000, 3635)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Clubs CounterForClubs (r:1 w:1)
	/// Proof: Clubs CounterForClubs (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Clubs Clubs (r:1 w:1)
	/// Proof: Clubs Clubs (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn create_club() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `8717`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(48_000_000, 8717)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Clubs Clubs (r:1 w:0)
	/// Proof: Clubs Clubs (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
	/// Storage: Clubs Members (r:1 w:1)
	/// Proof: Clubs Members (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	fn add_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `127`
		//  Estimated: `7172`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(26_000_000, 7172)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Clubs Members (r:1 w:1)
	/// Proof: Clubs Members (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	/// Storage: Clubs Clubs (r:1 w:0)
	/// Proof: Clubs Clubs (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn extend_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `362`
		//  Estimated: `10765`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(55_000_000, 10765)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Clubs Clubs (r:1 w:1)
	/// Proof: Clubs Clubs (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
	fn transfer_ownership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `127`
		//  Estimated: `3635`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(23_000_000, 3635)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Clubs Clubs (r:1 w:1)
	/// Proof: Clubs Clubs (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
	fn set_annual_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `127`
		//  Estimated: `3635`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(24_000_000, 3635)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
